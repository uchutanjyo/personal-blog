{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport blogs from \"../blogposts/blogposts.json\";\n\nfunction usePagination(_ref) {\n  _s();\n\n  let {\n    pageNumber\n  } = _ref;\n  const totalCount = blogs.posts.length;\n  const defaultPaginationData = blogs.posts.slice(0, 15);\n  const defaultPageSize = 15;\n  const defaultLastPage = Math.ceil(totalCount / defaultPageSize);\n  const [isSettingPage, setIsSettingPage] = useState(false);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n  const [lastPage, setLastPage] = useState(defaultLastPage);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageNumbers, setPageNumbers] = useState([1, 2, 3, DOTS, lastPage]);\n  const [currentPaginationData, setCurrentPaginationData] = useState(defaultPaginationData);\n  /* This hook was written to handle all state changes in the Pagination and Blogpost components in this application.\n   The essential functionality of this hook is as follows:\n  1) Change which blog posts are displayed on the current page depending on which page the user has navigated to (taken from the local blogs.json file).\n  2) Change the number of blog posts displayed per page depending on the pageSize selected from the dropdown options menu.\n  3. Change which pagination numbers are displayed when navigating through the different pages; change the total number of available pages to navigate through depending on which pageSize is selected.\n   These three pieces of functionality are accomplished using React's useState and useEffect hooks, as well as several arrow functions. For a more detailed explanation of the hook's functionality, please see the inline commments below.\n  */\n  // call this function to conditionally change the displayed pageNumbers used in Pagination based on the currentPage currently being viewed.\n\n  const changePageNumbers = () => {\n    let prevSib = currentPage - 1;\n    let nextSib = currentPage + 1;\n    let updatedPageNumbers; // if only one page\n\n    if (pageSize === 1) {\n      updatedPageNumbers = [1];\n    } // if on last page\n    else if (currentPage === lastPage) {\n      updatedPageNumbers = [1, DOTS, lastPage - 2, lastPage - 1, lastPage];\n      setLastPage(currentPage);\n    } // if on 2nd last page\n    else if (currentPage === lastPage - 1) {\n      updatedPageNumbers = [1, DOTS, lastPage - 2, lastPage - 1, lastPage];\n    } // if navigate back to 1st page\n    else if (currentPage === 1) {\n      updatedPageNumbers = [1, 2, 3, DOTS, lastPage];\n    } // if on 2nd page\n    else if (currentPage === 2) {\n      updatedPageNumbers = [1, DOTS, currentPage, nextSib, nextSib + 1, DOTS, lastPage];\n    } // in any other case\n    else {\n      updatedPageNumbers = [1, DOTS, prevSib, currentPage, nextSib, DOTS, lastPage];\n    }\n\n    setPageNumbers(updatedPageNumbers);\n  }; //  when either currentPage or pageSize are changed, call changePageNumbers to update them to reflect the current position in navigation / the current pageSize.\n\n\n  useEffect(() => {\n    changePageNumbers();\n  }, [currentPage, pageSize]); // onClick 'next' button in Pagination component, currentPage state + 1\n\n  const onNext = () => {\n    setCurrentPage(currentPage + 1);\n  }; // onClick 'previous' button in Pagination component, currentPage state - 1\n\n\n  const onPrev = () => {\n    setCurrentPage(currentPage - 1);\n  }; // when currentPage state changes, set currentPaginationData to the following data sliced from blog.posts array\n\n\n  useEffect(() => {\n    let indexStart = (currentPage - 1) * pageSize;\n    const updatedPaginationData = blogs.posts.slice(indexStart, indexStart + pageSize);\n    setCurrentPaginationData(updatedPaginationData);\n  }, [currentPage]); // onClick of page number in Paginaton, set currentPage state to the number clicked on. Set isSettingPage boolean to 'true'.\n\n  const onPageChange = pageNumber => {\n    setCurrentPage(pageNumber);\n    setIsSettingPage(true);\n  }; // when isSettingPage set to true by onPageChange function, set currentPaginationData to the following data sliced from blog.posts array. Then, re-set the same boolean to false.\n\n\n  useEffect(() => {\n    if (isSettingPage) {\n      let indexStart = (currentPage - 1) * pageSize;\n      const updatedPaginationData = blogs.posts.slice(indexStart, indexStart + pageSize);\n      setCurrentPaginationData(updatedPaginationData);\n      setIsSettingPage(false);\n    }\n  }, [isSettingPage]); // onPageSizeOptionChange in Pagination component. When option changed, call this function with the current size as an argument.\n  // Set page size to this size, then call changePageNumbers() to trigger a change in the number of pages that contain data.\n\n  const updateRowsPerPage = size => {\n    setPageSize(size);\n    changePageNumbers();\n  }; //  when pageSize state changes, set 'indexStart' variable to get correct starting index to slice array based on pageSize.\n  // slice currentPaginationData to reflect changed pageSize.\n\n\n  useEffect(() => {\n    let indexStart = (currentPage - 1) * pageSize;\n    const updatedPaginationData = blogs.posts.slice(indexStart, indexStart + pageSize);\n    setCurrentPaginationData(updatedPaginationData); // set currentPage state to 1 to display 1st page; set lastPage state to change lastPage icon.\n\n    setCurrentPage(1);\n    setLastPage(Math.ceil(totalCount / pageSize));\n  }, [pageSize]); // when lastPage set in the above useEffect, call changePageNumbers to refresh the pageNumbers state and immediately change the rendered pageSize.\n\n  useEffect(() => {\n    changePageNumbers();\n  }, [lastPage]);\n  return {\n    pageNumbers,\n    lastPage,\n    pageSize,\n    updateRowsPerPage,\n    currentPage,\n    currentPaginationData,\n    onPageChange,\n    onNext,\n    onPrev\n  };\n}\n\n_s(usePagination, \"iSKBn57Put7RBZoBIPPtxwOFiNk=\");\n\nexport default usePagination;","map":{"version":3,"names":["React","useState","useEffect","blogs","usePagination","pageNumber","totalCount","posts","length","defaultPaginationData","slice","defaultPageSize","defaultLastPage","Math","ceil","isSettingPage","setIsSettingPage","pageSize","setPageSize","lastPage","setLastPage","currentPage","setCurrentPage","pageNumbers","setPageNumbers","DOTS","currentPaginationData","setCurrentPaginationData","changePageNumbers","prevSib","nextSib","updatedPageNumbers","onNext","onPrev","indexStart","updatedPaginationData","onPageChange","updateRowsPerPage","size"],"sources":["/home/matt/Documents/new-personal-projects/blog/src/hooks/usePagination.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport blogs from \"../blogposts/blogposts.json\";\n\nfunction usePagination({pageNumber}) {\n  const totalCount = blogs.posts.length;\n  const defaultPaginationData = blogs.posts.slice(0, 15)\n  const defaultPageSize = 15;\n  const defaultLastPage = Math.ceil(totalCount / defaultPageSize)\n\n  const [isSettingPage, setIsSettingPage] = useState(false);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n  const [lastPage, setLastPage] = useState(defaultLastPage);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageNumbers, setPageNumbers] = useState([1, 2, 3, DOTS, lastPage]);\n  const [currentPaginationData, setCurrentPaginationData] = useState(defaultPaginationData);\n\n  /* This hook was written to handle all state changes in the Pagination and Blogpost components in this application.\n\n  The essential functionality of this hook is as follows:\n  1) Change which blog posts are displayed on the current page depending on which page the user has navigated to (taken from the local blogs.json file).\n  2) Change the number of blog posts displayed per page depending on the pageSize selected from the dropdown options menu.\n  3. Change which pagination numbers are displayed when navigating through the different pages; change the total number of available pages to navigate through depending on which pageSize is selected.\n\n  These three pieces of functionality are accomplished using React's useState and useEffect hooks, as well as several arrow functions. For a more detailed explanation of the hook's functionality, please see the inline commments below.\n  */\n\n  // call this function to conditionally change the displayed pageNumbers used in Pagination based on the currentPage currently being viewed.\n  const changePageNumbers = () => {\n    let prevSib = currentPage - 1;\n    let nextSib = currentPage + 1;\n    let updatedPageNumbers;\n    // if only one page\n    if (pageSize === 1) {\n      updatedPageNumbers = [1];\n    }\n    // if on last page\n    else if (currentPage === lastPage) {\n      updatedPageNumbers = [1, DOTS, lastPage - 2, lastPage - 1, lastPage];\n      setLastPage(currentPage);\n    }\n    // if on 2nd last page\n    else if (currentPage === lastPage - 1) {\n      updatedPageNumbers = [1, DOTS, lastPage - 2, lastPage - 1, lastPage];\n    }\n    // if navigate back to 1st page\n    else if (currentPage === 1) {\n      updatedPageNumbers = [1, 2, 3, DOTS, lastPage];\n    }\n    // if on 2nd page\n    else if (currentPage === 2) {\n      updatedPageNumbers = [1, DOTS, currentPage, nextSib, nextSib + 1, DOTS, lastPage];\n    }\n    // in any other case\n    else {\n      updatedPageNumbers = [1, DOTS, prevSib, currentPage, nextSib, DOTS, lastPage];\n    }\n    setPageNumbers(updatedPageNumbers)\n  };\n\n  //  when either currentPage or pageSize are changed, call changePageNumbers to update them to reflect the current position in navigation / the current pageSize.\n  useEffect(() => {\n    changePageNumbers();\n  }, [currentPage, pageSize]);\n\n  // onClick 'next' button in Pagination component, currentPage state + 1\n  const onNext = () => {\n    setCurrentPage(currentPage + 1);\n  };\n\n  // onClick 'previous' button in Pagination component, currentPage state - 1\n  const onPrev = () => {\n    setCurrentPage(currentPage - 1);\n  };\n\n  // when currentPage state changes, set currentPaginationData to the following data sliced from blog.posts array\n  useEffect(() => {\n    let indexStart = (currentPage - 1) * pageSize;\n    const updatedPaginationData = blogs.posts.slice((indexStart), (indexStart) + (pageSize))\n    setCurrentPaginationData(updatedPaginationData);\n  }, [currentPage]);\n\n  // onClick of page number in Paginaton, set currentPage state to the number clicked on. Set isSettingPage boolean to 'true'.\n  const onPageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n    setIsSettingPage(true);\n  };\n\n  // when isSettingPage set to true by onPageChange function, set currentPaginationData to the following data sliced from blog.posts array. Then, re-set the same boolean to false.\n  useEffect(() => {\n    if (isSettingPage) {\n      let indexStart = (currentPage - 1) * pageSize;\n      const updatedPaginationData = blogs.posts.slice((indexStart), (indexStart) + (pageSize))\n      setCurrentPaginationData(updatedPaginationData);\n      setIsSettingPage(false);\n    }\n  }, [isSettingPage]);\n\n  // onPageSizeOptionChange in Pagination component. When option changed, call this function with the current size as an argument.\n  // Set page size to this size, then call changePageNumbers() to trigger a change in the number of pages that contain data.\n  const updateRowsPerPage = (size) => {\n    setPageSize(size);\n    changePageNumbers();\n  };\n\n  //  when pageSize state changes, set 'indexStart' variable to get correct starting index to slice array based on pageSize.\n  // slice currentPaginationData to reflect changed pageSize.\n  useEffect(() => {\n    let indexStart = (currentPage - 1) * pageSize;\n    const updatedPaginationData = blogs.posts.slice((indexStart), (indexStart) + (pageSize))\n    setCurrentPaginationData(updatedPaginationData);\n    // set currentPage state to 1 to display 1st page; set lastPage state to change lastPage icon.\n    setCurrentPage(1);\n    setLastPage(Math.ceil(totalCount / pageSize));\n  }, [pageSize]);\n\n  // when lastPage set in the above useEffect, call changePageNumbers to refresh the pageNumbers state and immediately change the rendered pageSize.\n  useEffect(() => {\n    changePageNumbers();\n  }, [lastPage]);\n\n  return {\n    pageNumbers,\n    lastPage,\n    pageSize,\n    updateRowsPerPage,\n    currentPage,\n    currentPaginationData,\n    onPageChange,\n    onNext,\n    onPrev,\n  };\n}\n\nexport default usePagination;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}