{"ast":null,"code":"var _jsxFileName = \"/home/matt/Documents/new-personal-projects/mitehole/src/components/MusicPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from 'react';\nimport wami from '../mp3s/wami.mp3';\nimport unreleased1 from '../mp3s/unreleased-1.mp3'; // Music player\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst songs = [{\n  name: 'wami',\n  displayName: 'Q-Q Birds - Clean',\n  artist: 'Mite',\n  date: '2018',\n  file: wami,\n  albumArt: 'https://f4.bcbits.com/img/a1756680641_2.jpg'\n}, {\n  name: 'unreleased-1',\n  displayName: 'Unreleased-1',\n  artist: 'Mite',\n  date: '2020',\n  file: unreleased1,\n  albumArt: 'albums/thumbnails/hole.jpg'\n}];\n\nconst MusicPlayer = () => {\n  _s();\n\n  const [songTitle, setSongTitle] = useState('');\n  const [songArtist, setSongArtist] = useState('');\n  const [songIndex, setSongIndex] = useState(0);\n  const [songArt, setSongArt] = useState(null);\n  const [songDate, setSongDate] = useState('');\n  const [trackProgress, setTrackProgress] = useState('0');\n  const [progressPercent, setProgressPercent] = useState('0');\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(null);\n\n  const getAudio = () => {\n    if (songIndex > songs.length - 1) {\n      setSongIndex(0);\n      return new Audio(songs[0].file);\n    }\n\n    if (songIndex < 0) {\n      console.log(songIndex < 0);\n      let songsLength = songs.length - 1;\n      setSongIndex(songsLength);\n      console.log(songsLength);\n      return new Audio(songs[songsLength].file);\n    } else {\n      return new Audio(songs[songIndex].file);\n    }\n  }; //  if (songIndex < 0) {\n  //      console.log(songIndex < 0)\n  //      let songsLength = songs.length - 1\n  //     setSongIndex(songsLength);\n  //     console.log(songsLength)\n  //     return new Audio(songs[songsLength].file)\n  // }\n\n\n  const progressBar = useRef();\n  const audioRef = useRef(getAudio());\n  const intervalRef = useRef();\n\n  const loadSong = song => {\n    setSongTitle(songs[songIndex].displayName);\n    setSongArtist(songs[songIndex].artist);\n    setSongDate(songs[songIndex].date);\n    setSongArt(songs[songIndex].albumArt); // audioRef.current.addEventListener('loadedmetadata', (e) => {\n  };\n\n  const startTimer = () => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    console.log(audioRef.current.currentTime);\n    intervalRef.current = setInterval(() => {\n      if (isPlaying) {\n        setTrackProgress(Math.floor(audioRef.current.currentTime)); // if (duration != null) {\n        //     setProgressPercent((trackProgress/duration) * 100)\n        //     console.log(progressPercent)\n        // }\n      }\n    }, [1000]);\n  }; // Play\n\n\n  const playSong = () => {\n    setIsPlaying(true);\n  };\n\n  const pauseSong = () => {\n    setIsPlaying(false);\n  };\n\n  useEffect(() => {\n    if (audioRef != null && isPlaying) {\n      startTimer();\n      audioRef.current.play();\n    } else if (audioRef != null && !isPlaying) {\n      audioRef.current.pause();\n    } // let audio = document.querySelector('#audio')\n\n\n    console.log(isPlaying);\n  }, [isPlaying]); // when songIndex increases, load next song in songs array. \n  // when songIndex drops below zero, set to the final array index\n  // i managed to make this work by returning automatically on songIndex reset (before, it was executing loadSong before the state had a chance to update)\n\n  useEffect(() => {\n    console.log(songIndex);\n    audioRef.current.pause();\n    setIsPlaying(false);\n\n    if (songIndex > songs.length - 1) {\n      alert('no more songs');\n    }\n\n    if (songIndex < 0) {\n      return;\n    }\n\n    console.log(songIndex);\n    loadSong(songs[songIndex]);\n    audioRef.current = new Audio(songs[songIndex].file);\n  }, [songIndex]); // this one took me a while - setting total duration of each track\n\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener('loadedmetadata', e => {\n        if (audioRef.current.duration != NaN) {\n          console.log(audioRef);\n          const dur = Math.floor(audioRef.current.duration);\n          const minutes = Math.floor(dur / 60);\n          const seconds = dur - minutes * 60;\n          setDuration(`${minutes}:${seconds}`);\n          setProgressPercent(audioRef.current.currentTime / dur * 100);\n        }\n      });\n    }\n  }, [audioRef, songIndex]); // const setProgressBar = (e) => {\n  //     console.log('dwsf')\n  //     const width = e.clientX;\n  //     const clickX = e.nativeEvent.offsetX;\n  //     console.log(audioRef)\n  //     const {duration} = audioRef;\n  // const ok = (clickX / width) * duration;\n  //     setTrackProgress(ok)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: songArt,\n          alt: \"Album Art\",\n          id: \"albumart2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"audio\",\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: audioRef,\n            type: \"audio/mp3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 24\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"title\",\n        children: songTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"artist\",\n        children: [songArtist, \" - \", songDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-container\",\n        id: \"progress-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          id: \"progress\",\n          style: {\n            width: `${progressPercent}%`\n          },\n          ref: progressBar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duration-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"current-time\",\n            children: trackProgress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"duration\",\n            children: duration\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            onClick: () => setSongIndex(songIndex - 1),\n            className: \"fas fa-backward\",\n            id: \"prev\",\n            title: \"backward\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            onClick: playSong,\n            className: !isPlaying && 'fas fa-play main-button',\n            id: \"play\",\n            title: \"play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            onClick: pauseSong,\n            className: isPlaying && 'fas fa-pause main-button',\n            id: \"pause\",\n            title: \"pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            onClick: () => setSongIndex(songIndex + 1),\n            className: \"fas fa-forward\",\n            id: \"next\",\n            title: \"forward\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 216,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n};\n\n_s(MusicPlayer, \"6GsZFnAULJogQgB8Ncgo1BtCFnk=\");\n\n_c = MusicPlayer;\nexport default MusicPlayer; // const updateProgressBar = (e) => {\n//     const width = e.clientX;\n//     const clickX = e.nativeEvent.offsetX;\n//     console.log(audioRef.currentTime)\n//     console.log(e)\n//     if (isPlaying) {\n//  //    Update progress bar\n//  const progressPercent = (audioRef.currentTime/duration) * 100;\n//  console.log(progressBar)\n//      progressBar.current.style.setProperty('width', `${progressPercent}%`);\n//  // Calculate display for current\n//  const currentMinutes = Math.floor(currentTime / 60);\n//  let currentSeconds = Math.floor(currentTime % 60);\n//  if (currentSeconds < 10) {\n//      currentSeconds = `0${currentSeconds}`;\n//  }\n//  currentTimeEl.textContent = `${currentMinutes}:${currentSeconds}`\n// }\n// }\n// \n\nvar _c;\n\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","wami","unreleased1","songs","name","displayName","artist","date","file","albumArt","MusicPlayer","songTitle","setSongTitle","songArtist","setSongArtist","songIndex","setSongIndex","songArt","setSongArt","songDate","setSongDate","trackProgress","setTrackProgress","progressPercent","setProgressPercent","isPlaying","setIsPlaying","duration","setDuration","getAudio","length","Audio","console","log","songsLength","progressBar","audioRef","intervalRef","loadSong","song","startTimer","clearInterval","current","currentTime","setInterval","Math","floor","playSong","pauseSong","play","pause","alert","addEventListener","e","NaN","dur","minutes","seconds","width"],"sources":["/home/matt/Documents/new-personal-projects/mitehole/src/components/MusicPlayer.js"],"sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\nimport wami from '../mp3s/wami.mp3'\nimport unreleased1 from '../mp3s/unreleased-1.mp3'\n\n\n// Music player\nconst songs = [\n    {\n        name: 'wami',\n        displayName: 'Q-Q Birds - Clean',\n        artist: 'Mite',\n        date: '2018',\n        file: wami,\n        albumArt: 'https://f4.bcbits.com/img/a1756680641_2.jpg'\n    },\n    \n    {\n        name: 'unreleased-1',\n        displayName: 'Unreleased-1',\n        artist: 'Mite',\n        date: '2020',\n        file: unreleased1,\n        albumArt: 'albums/thumbnails/hole.jpg'\n\n\n    },\n\n\n    ]\n\nconst MusicPlayer = () => {\n    const [songTitle, setSongTitle] = useState('')\n    const [songArtist, setSongArtist] = useState('')\n    const [songIndex, setSongIndex] = useState(0)\n    const [songArt, setSongArt] = useState(null)\n    const [songDate, setSongDate] = useState('')\n\n    const [trackProgress, setTrackProgress] = useState('0')\n    const [progressPercent, setProgressPercent] = useState('0')\n\n\n\n    const [isPlaying, setIsPlaying] = useState(false)\n    const [duration, setDuration] = useState(null)\n    \nconst getAudio = () => {\n\n\n     if (songIndex > songs.length - 1) {\n         \n        setSongIndex(0);\n        return new Audio(songs[0].file)    }\n   \n           if (songIndex < 0) {\n         console.log(songIndex < 0)\n         let songsLength = songs.length - 1\n        setSongIndex(songsLength);\n        console.log(songsLength)\n        return new Audio(songs[songsLength].file)\n    }\n    else { \n        \n        return new Audio(songs[songIndex].file)\n       }\n}\n\n    //  if (songIndex < 0) {\n    //      console.log(songIndex < 0)\n    //      let songsLength = songs.length - 1\n    //     setSongIndex(songsLength);\n    //     console.log(songsLength)\n    //     return new Audio(songs[songsLength].file)\n    // }\n\n    const progressBar = useRef();\n    const audioRef = useRef(getAudio());\n    const intervalRef = useRef();\n\n    const loadSong = (song) => {\n        setSongTitle(songs[songIndex].displayName)\n        setSongArtist(songs[songIndex].artist)\n        setSongDate(songs[songIndex].date)\n        setSongArt(songs[songIndex].albumArt)\n        // audioRef.current.addEventListener('loadedmetadata', (e) => {\n \n    };\n\n\n    const startTimer = () => {\n        // Clear any timers already running\n        clearInterval(intervalRef.current);\n  console.log(audioRef.current.currentTime)\n       intervalRef.current = setInterval(() => {\n            if (isPlaying) {\n            setTrackProgress(Math.floor(audioRef.current.currentTime));\n\n            // if (duration != null) {\n\n            //     setProgressPercent((trackProgress/duration) * 100)\n            //     console.log(progressPercent)\n            // }\n        \n       }\n\n        }, [1000]);\n      \n  }\n      \n\n// Play\nconst playSong = () => {\n    setIsPlaying(true)\n    \n}\n\nconst pauseSong = () => {\n    setIsPlaying(false);\n\n    }\n\n    \nuseEffect( () => {\n \n        if (audioRef != null && isPlaying) {\n            startTimer()\n            audioRef.current.play();\n        }\n        else if(audioRef != null && !isPlaying)  {\n            audioRef.current.pause();\n\n        }\n    // let audio = document.querySelector('#audio')\n    console.log(isPlaying)\n}       \n, [isPlaying])\n\n\n\n    // when songIndex increases, load next song in songs array. \n    // when songIndex drops below zero, set to the final array index\n    // i managed to make this work by returning automatically on songIndex reset (before, it was executing loadSong before the state had a chance to update)\n        useEffect( () => {\n            console.log(songIndex)\n\n            audioRef.current.pause()\n            setIsPlaying(false);\n\n            if (songIndex > songs.length - 1) {\n                alert('no more songs')\n            }\n            if (songIndex < 0) {\n                return\n            }\n            console.log(songIndex)\n\n            loadSong(songs[songIndex]);\n            audioRef.current = new Audio(songs[songIndex].file)\n\n\n\n              }\n        , [ songIndex])\n\n\n// this one took me a while - setting total duration of each track\n        useEffect( () => {\n            if (audioRef.current) {\n            audioRef.current.addEventListener('loadedmetadata', (e) => {\n                if (audioRef.current.duration != NaN) {\n                    console.log(audioRef)\n\n                    const dur = Math.floor(audioRef.current.duration)\n                    const minutes = Math.floor(dur / 60);\n                    const seconds = dur - minutes * 60;\n                    setDuration(`${minutes}:${seconds}`) \n                    setProgressPercent((audioRef.current.currentTime/dur) * 100)\n                }\n              }) }\n        }       \n        , [audioRef, songIndex])\n    \n\n        // const setProgressBar = (e) => {\n        //     console.log('dwsf')\n        //     const width = e.clientX;\n        //     const clickX = e.nativeEvent.offsetX;\n        //     console.log(audioRef)\n        //     const {duration} = audioRef;\n        // const ok = (clickX / width) * duration;\n\n        //     setTrackProgress(ok)\n\n        // }\n    return (\n    <>\n\n<div className=\"player-container\">\n\n\n  <div className=\"img-container\">\n      <img src={songArt} alt=\"Album Art\" id=\"albumart2\"/>\n     <audio id=\"audio\"><source src={audioRef}  type=\"audio/mp3\" /></audio>\n  </div>\n  <h2 id=\"title\">{songTitle}</h2>\n  <h3 id=\"artist\">{songArtist} - {songDate}</h3>\n  <div className=\"progress-container\" id=\"progress-container\"  >\n  <div className=\"progress\" id=\"progress\" style={{width : `${progressPercent}%`}}  ref={progressBar}></div>\n  <div className=\"duration-wrapper\">\n      <span className=\"current-time\">{trackProgress}</span>\n      <span className=\"duration\">{duration}</span>\n  </div>\n  <div className=\"player-controls\">\n      <i onClick={() => setSongIndex(songIndex - 1)} className=\"fas fa-backward\" id=\"prev\" title=\"backward\"></i>\n      <i onClick={playSong} className={!isPlaying && 'fas fa-play main-button'} id=\"play\" title=\"play\"></i>\n      <i onClick={pauseSong} className={isPlaying && 'fas fa-pause main-button'} id=\"pause\" title=\"pause\"></i>\n      <i onClick={() => setSongIndex(songIndex + 1)} className=\"fas fa-forward\" id=\"next\" title=\"forward\"></i>\n\n  </div>\n  </div>\n</div>\n\n</>\n    )\n}\n\nexport default MusicPlayer;\n\n\n        // const updateProgressBar = (e) => {\n        //     const width = e.clientX;\n        //     const clickX = e.nativeEvent.offsetX;\n        //     console.log(audioRef.currentTime)\n\n        //     console.log(e)\n        //     if (isPlaying) {\n                \n    \n\n        //  //    Update progress bar\n        //  const progressPercent = (audioRef.currentTime/duration) * 100;\n        //  console.log(progressBar)\n        //      progressBar.current.style.setProperty('width', `${progressPercent}%`);\n\n        //  // Calculate display for current\n        //  const currentMinutes = Math.floor(currentTime / 60);\n        //  let currentSeconds = Math.floor(currentTime % 60);\n        //  if (currentSeconds < 10) {\n        //      currentSeconds = `0${currentSeconds}`;\n        //  }\n        //  currentTimeEl.textContent = `${currentMinutes}:${currentSeconds}`\n\n        // }\n        \n        // }\n        // "],"mappings":"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"},"metadata":{},"sourceType":"module"}