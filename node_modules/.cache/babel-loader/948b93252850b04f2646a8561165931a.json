{"ast":null,"code":"var _jsxFileName = \"/home/matt/Documents/new-personal-projects/mitehole/src/components/MusicPlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useEffect, useState } from \"react\";\nimport wami from \"../mp3s/wami.mp3\";\nimport unreleased1 from \"../mp3s/unreleased-1.mp3\"; // Music player\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst songs = [{\n  name: \"unreleased-1\",\n  displayName: \"Unreleased-1\",\n  artist: \"Mite\",\n  date: \"2020\",\n  file: unreleased1,\n  albumArt: \"https://f4.bcbits.com/img/a2170320661_2.jpg\"\n}, {\n  name: \"wami\",\n  displayName: \"Q-Q Birds - Clean\",\n  artist: \"Mite\",\n  date: \"2018\",\n  file: wami,\n  albumArt: \"https://f4.bcbits.com/img/a1756680641_2.jpg\"\n}];\n\nconst MusicPlayer = () => {\n  _s();\n\n  const [songTitle, setSongTitle] = useState(\"\");\n  const [songArtist, setSongArtist] = useState(\"\");\n  const [songIndex, setSongIndex] = useState(0);\n  const [songArt, setSongArt] = useState(null);\n  const [songDate, setSongDate] = useState(\"\");\n  const [trackProgress, setTrackProgress] = useState(\"0:00\");\n  const [progressPercent, setProgressPercent] = useState(\"0\");\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(null);\n\n  const getAudio = () => {\n    if (songIndex > songs.length - 1) {\n      setSongIndex(0);\n      return new Audio(songs[0].file);\n    }\n\n    if (songIndex < 0) {\n      console.log(songIndex < 0);\n      let songsLength = songs.length - 1;\n      setSongIndex(songsLength);\n      console.log(songsLength);\n      return new Audio(songs[songsLength].file);\n    } else {\n      return new Audio(songs[songIndex].file);\n    }\n  }; //  if (songIndex < 0) {\n  //      console.log(songIndex < 0)\n  //      let songsLength = songs.length - 1\n  //     setSongIndex(songsLength);\n  //     console.log(songsLength)\n  //     return new Audio(songs[songsLength].file)\n  // }\n\n\n  const progressBar = useRef();\n  const audioRef = useRef(getAudio());\n  const intervalRef = useRef();\n\n  const loadSong = song => {\n    setSongTitle(songs[songIndex].displayName);\n    setSongArtist(songs[songIndex].artist);\n    setSongDate(songs[songIndex].date);\n    setSongArt(songs[songIndex].albumArt); // audioRef.current.addEventListener('loadedmetadata', (e) => {\n  };\n\n  const startTimer = () => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (isPlaying) {\n        const currentTime = audioRef.current.currentTime;\n        const currentMinutes = Math.floor(currentTime / 60);\n        let currentSeconds = Math.floor(currentTime % 60);\n\n        if (currentSeconds < 10) {\n          currentSeconds = `0${currentSeconds}`;\n        }\n\n        setTrackProgress(`${currentMinutes}:${currentSeconds}`);\n      }\n    }, [1000]);\n  }; // Play\n\n\n  const playSong = () => {\n    setIsPlaying(true);\n  };\n\n  const pauseSong = () => {\n    setIsPlaying(false);\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      startTimer();\n      audioRef.current.play();\n    } else if (audioRef != null && !isPlaying) {\n      audioRef.current.pause();\n    } // let audio = document.querySelector('#audio')\n\n\n    console.log(isPlaying);\n  }, [isPlaying]); // when songIndex increases, load next song in songs array.\n  // when songIndex drops below zero, set to the final array index\n  // i managed to make this work by returning automatically on songIndex reset (before, it was executing loadSong before the state had a chance to update)\n\n  useEffect(() => {\n    console.log(songIndex);\n    audioRef.current.pause();\n    setIsPlaying(false);\n\n    if (songIndex > songs.length - 1) {\n      alert(\"no more songs\");\n    }\n\n    if (songIndex < 0) {\n      return;\n    }\n\n    console.log(songIndex);\n    loadSong(songs[songIndex]);\n    audioRef.current = new Audio(songs[songIndex].file);\n  }, [songIndex]); // this one took me a while - setting total duration of each track\n\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener(\"loadedmetadata\", e => {\n        if (audioRef.current.duration != NaN) {\n          console.log(audioRef);\n          const dur = Math.floor(audioRef.current.duration);\n          const minutes = Math.floor(dur / 60);\n          const seconds = dur - minutes * 60;\n          setDuration(`${minutes}:${seconds}`);\n          setProgressPercent(audioRef.current.currentTime / dur * 100);\n        }\n      });\n    }\n  }, [audioRef, songIndex]);\n\n  const setProgressBar = e => {\n    console.log('dwsf');\n    const width = e.clientX;\n    const clickX = e.nativeEvent.offsetX;\n    console.log(width, clickX); //     console.log(audioRef)\n    //     const {duration} = audioRef;\n    // const ok = (clickX / width) * duration;\n    // setTrackProgress(ok)\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"player-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"img-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: songArt,\n          alt: \"Album Art\",\n          id: \"albumart2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n          id: \"audio\",\n          children: /*#__PURE__*/_jsxDEV(\"source\", {\n            src: audioRef,\n            type: \"audio/mp3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        id: \"title\",\n        children: songTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"artist\",\n        children: [songArtist, \" - \", songDate]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-container\",\n        id: \"progress-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          id: \"progress\",\n          style: {\n            width: `${progressPercent}%`\n          },\n          ref: progressBar,\n          onClick: () => setProgressBar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"duration-wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"current-time\",\n            children: trackProgress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"duration\",\n            children: duration\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"player-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"i\", {\n            onClick: () => setSongIndex(songIndex - 1),\n            className: \"fas fa-backward\",\n            id: \"prev\",\n            title: \"backward\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            onClick: playSong,\n            className: !isPlaying && \"fas fa-play main-button\",\n            id: \"play\",\n            title: \"play\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            onClick: pauseSong,\n            className: isPlaying && \"fas fa-pause main-button\",\n            id: \"pause\",\n            title: \"pause\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            onClick: () => setSongIndex(songIndex + 1),\n            className: \"fas fa-forward\",\n            id: \"next\",\n            title: \"forward\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(MusicPlayer, \"LIFrDwhEEYQDWEplX0m3yD1wKjg=\");\n\n_c = MusicPlayer;\nexport default MusicPlayer; // const updateProgressBar = (e) => {\n//     const width = e.clientX;\n//     const clickX = e.nativeEvent.offsetX;\n//     console.log(audioRef.currentTime)\n//     console.log(e)\n//     if (isPlaying) {\n//  //    Update progress bar\n//  const progressPercent = (audioRef.currentTime/duration) * 100;\n//  console.log(progressBar)\n//      progressBar.current.style.setProperty('width', `${progressPercent}%`);\n//  // Calculate display for current\n//  const currentMinutes = Math.floor(currentTime / 60);\n//  let currentSeconds = Math.floor(currentTime % 60);\n//  if (currentSeconds < 10) {\n//      currentSeconds = `0${currentSeconds}`;\n//  }\n//  currentTimeEl.textContent = `${currentMinutes}:${currentSeconds}`\n// }\n// }\n//\n\nvar _c;\n\n$RefreshReg$(_c, \"MusicPlayer\");","map":{"version":3,"names":["React","useRef","useEffect","useState","wami","unreleased1","songs","name","displayName","artist","date","file","albumArt","MusicPlayer","songTitle","setSongTitle","songArtist","setSongArtist","songIndex","setSongIndex","songArt","setSongArt","songDate","setSongDate","trackProgress","setTrackProgress","progressPercent","setProgressPercent","isPlaying","setIsPlaying","duration","setDuration","getAudio","length","Audio","console","log","songsLength","progressBar","audioRef","intervalRef","loadSong","song","startTimer","clearInterval","current","setInterval","currentTime","currentMinutes","Math","floor","currentSeconds","playSong","pauseSong","play","pause","alert","addEventListener","e","NaN","dur","minutes","seconds","setProgressBar","width","clientX","clickX","nativeEvent","offsetX"],"sources":["/home/matt/Documents/new-personal-projects/mitehole/src/components/MusicPlayer.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport wami from \"../mp3s/wami.mp3\";\nimport unreleased1 from \"../mp3s/unreleased-1.mp3\";\n\n// Music player\nconst songs = [\n  {\n    name: \"unreleased-1\",\n    displayName: \"Unreleased-1\",\n    artist: \"Mite\",\n    date: \"2020\",\n    file: unreleased1,\n    albumArt: \"https://f4.bcbits.com/img/a2170320661_2.jpg\",\n  },\n  {\n    name: \"wami\",\n    displayName: \"Q-Q Birds - Clean\",\n    artist: \"Mite\",\n    date: \"2018\",\n    file: wami,\n    albumArt: \"https://f4.bcbits.com/img/a1756680641_2.jpg\",\n  },\n];\n\nconst MusicPlayer = () => {\n  const [songTitle, setSongTitle] = useState(\"\");\n  const [songArtist, setSongArtist] = useState(\"\");\n  const [songIndex, setSongIndex] = useState(0);\n  const [songArt, setSongArt] = useState(null);\n  const [songDate, setSongDate] = useState(\"\");\n\n  const [trackProgress, setTrackProgress] = useState(\"0:00\");\n  const [progressPercent, setProgressPercent] = useState(\"0\");\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [duration, setDuration] = useState(null);\n\n  const getAudio = () => {\n    if (songIndex > songs.length - 1) {\n      setSongIndex(0);\n      return new Audio(songs[0].file);\n    }\n    if (songIndex < 0) {\n      console.log(songIndex < 0);\n      let songsLength = songs.length - 1;\n      setSongIndex(songsLength);\n      console.log(songsLength);\n      return new Audio(songs[songsLength].file);\n    } else {\n      return new Audio(songs[songIndex].file);\n    }\n  };\n\n  //  if (songIndex < 0) {\n  //      console.log(songIndex < 0)\n  //      let songsLength = songs.length - 1\n  //     setSongIndex(songsLength);\n  //     console.log(songsLength)\n  //     return new Audio(songs[songsLength].file)\n  // }\n\n  const progressBar = useRef();\n  const audioRef = useRef(getAudio());\n  const intervalRef = useRef();\n\n  const loadSong = (song) => {\n    setSongTitle(songs[songIndex].displayName);\n    setSongArtist(songs[songIndex].artist);\n    setSongDate(songs[songIndex].date);\n    setSongArt(songs[songIndex].albumArt);\n    // audioRef.current.addEventListener('loadedmetadata', (e) => {\n  };\n\n  const startTimer = () => {\n    // Clear any timers already running\n    clearInterval(intervalRef.current);\n    intervalRef.current = setInterval(() => {\n      if (isPlaying) {\n        const currentTime = audioRef.current.currentTime;\n        const currentMinutes = Math.floor(currentTime / 60);\n        let currentSeconds = Math.floor(currentTime % 60);\n        if (currentSeconds < 10) {\n          currentSeconds = `0${currentSeconds}`;\n        }\n        setTrackProgress(`${currentMinutes}:${currentSeconds}`);\n      }\n    }, [1000]);\n  };\n\n  // Play\n  const playSong = () => {\n    setIsPlaying(true);\n  };\n\n  const pauseSong = () => {\n    setIsPlaying(false);\n  };\n\n  useEffect(() => {\n    if (isPlaying) {\n      startTimer();\n      audioRef.current.play();\n    } else if (audioRef != null && !isPlaying) {\n      audioRef.current.pause();\n    }\n    // let audio = document.querySelector('#audio')\n    console.log(isPlaying);\n  }, [isPlaying]);\n\n  // when songIndex increases, load next song in songs array.\n  // when songIndex drops below zero, set to the final array index\n  // i managed to make this work by returning automatically on songIndex reset (before, it was executing loadSong before the state had a chance to update)\n  useEffect(() => {\n    console.log(songIndex);\n\n    audioRef.current.pause();\n    setIsPlaying(false);\n\n    if (songIndex > songs.length - 1) {\n      alert(\"no more songs\");\n    }\n    if (songIndex < 0) {\n      return;\n    }\n    console.log(songIndex);\n\n    loadSong(songs[songIndex]);\n    audioRef.current = new Audio(songs[songIndex].file);\n  }, [songIndex]);\n\n  // this one took me a while - setting total duration of each track\n  useEffect(() => {\n    if (audioRef.current) {\n      audioRef.current.addEventListener(\"loadedmetadata\", (e) => {\n        if (audioRef.current.duration != NaN) {\n          console.log(audioRef);\n\n          const dur = Math.floor(audioRef.current.duration);\n          const minutes = Math.floor(dur / 60);\n          const seconds = dur - minutes * 60;\n          setDuration(`${minutes}:${seconds}`);\n          setProgressPercent((audioRef.current.currentTime / dur) * 100);\n        }\n      });\n    }\n  }, [audioRef, songIndex]);\n\n  const setProgressBar = (e) => {\n      console.log('dwsf')\n      const width = e.clientX;\n      const clickX = e.nativeEvent.offsetX;\n      console.log(width, clickX)\n\n  //     console.log(audioRef)\n  //     const {duration} = audioRef;\n  // const ok = (clickX / width) * duration;\n\n      // setTrackProgress(ok)\n\n  }\n  return (\n    <>\n      <div className=\"player-container\">\n        <div className=\"img-container\">\n          <img src={songArt} alt=\"Album Art\" id=\"albumart2\" />\n          <audio id=\"audio\">\n            <source src={audioRef} type=\"audio/mp3\" />\n          </audio>\n        </div>\n        <h2 id=\"title\">{songTitle}</h2>\n        <h3 id=\"artist\">\n          {songArtist} - {songDate}\n        </h3>\n        <div className=\"progress-container\" id=\"progress-container\">\n          <div\n            className=\"progress\"\n            id=\"progress\"\n            style={{ width: `${progressPercent}%` }}\n            ref={progressBar}\n            onClick={() => setProgressBar}\n          ></div>\n          <div className=\"duration-wrapper\">\n            <span className=\"current-time\">{trackProgress}</span>\n            <span className=\"duration\">{duration}</span>\n          </div>\n          <div className=\"player-controls\">\n            <i\n              onClick={() => setSongIndex(songIndex - 1)}\n              className=\"fas fa-backward\"\n              id=\"prev\"\n              title=\"backward\"\n            ></i>\n            <i\n              onClick={playSong}\n              className={!isPlaying && \"fas fa-play main-button\"}\n              id=\"play\"\n              title=\"play\"\n            ></i>\n            <i\n              onClick={pauseSong}\n              className={isPlaying && \"fas fa-pause main-button\"}\n              id=\"pause\"\n              title=\"pause\"\n            ></i>\n            <i\n              onClick={() => setSongIndex(songIndex + 1)}\n              className=\"fas fa-forward\"\n              id=\"next\"\n              title=\"forward\"\n            ></i>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MusicPlayer;\n\n// const updateProgressBar = (e) => {\n//     const width = e.clientX;\n//     const clickX = e.nativeEvent.offsetX;\n//     console.log(audioRef.currentTime)\n\n//     console.log(e)\n//     if (isPlaying) {\n\n//  //    Update progress bar\n//  const progressPercent = (audioRef.currentTime/duration) * 100;\n//  console.log(progressBar)\n//      progressBar.current.style.setProperty('width', `${progressPercent}%`);\n\n//  // Calculate display for current\n//  const currentMinutes = Math.floor(currentTime / 60);\n//  let currentSeconds = Math.floor(currentTime % 60);\n//  if (currentSeconds < 10) {\n//      currentSeconds = `0${currentSeconds}`;\n//  }\n//  currentTimeEl.textContent = `${currentMinutes}:${currentSeconds}`\n\n// }\n// }\n//\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,WAAP,MAAwB,0BAAxB,C,CAEA;;;;AACA,MAAMC,KAAK,GAAG,CACZ;EACEC,IAAI,EAAE,cADR;EAEEC,WAAW,EAAE,cAFf;EAGEC,MAAM,EAAE,MAHV;EAIEC,IAAI,EAAE,MAJR;EAKEC,IAAI,EAAEN,WALR;EAMEO,QAAQ,EAAE;AANZ,CADY,EASZ;EACEL,IAAI,EAAE,MADR;EAEEC,WAAW,EAAE,mBAFf;EAGEC,MAAM,EAAE,MAHV;EAIEC,IAAI,EAAE,MAJR;EAKEC,IAAI,EAAEP,IALR;EAMEQ,QAAQ,EAAE;AANZ,CATY,CAAd;;AAmBA,MAAMC,WAAW,GAAG,MAAM;EAAA;;EACxB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACa,UAAD,EAAaC,aAAb,IAA8Bd,QAAQ,CAAC,EAAD,CAA5C;EACA,MAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAAC,CAAD,CAA1C;EACA,MAAM,CAACiB,OAAD,EAAUC,UAAV,IAAwBlB,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,EAAD,CAAxC;EAEA,MAAM,CAACqB,aAAD,EAAgBC,gBAAhB,IAAoCtB,QAAQ,CAAC,MAAD,CAAlD;EACA,MAAM,CAACuB,eAAD,EAAkBC,kBAAlB,IAAwCxB,QAAQ,CAAC,GAAD,CAAtD;EAEA,MAAM,CAACyB,SAAD,EAAYC,YAAZ,IAA4B1B,QAAQ,CAAC,KAAD,CAA1C;EACA,MAAM,CAAC2B,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,IAAD,CAAxC;;EAEA,MAAM6B,QAAQ,GAAG,MAAM;IACrB,IAAId,SAAS,GAAGZ,KAAK,CAAC2B,MAAN,GAAe,CAA/B,EAAkC;MAChCd,YAAY,CAAC,CAAD,CAAZ;MACA,OAAO,IAAIe,KAAJ,CAAU5B,KAAK,CAAC,CAAD,CAAL,CAASK,IAAnB,CAAP;IACD;;IACD,IAAIO,SAAS,GAAG,CAAhB,EAAmB;MACjBiB,OAAO,CAACC,GAAR,CAAYlB,SAAS,GAAG,CAAxB;MACA,IAAImB,WAAW,GAAG/B,KAAK,CAAC2B,MAAN,GAAe,CAAjC;MACAd,YAAY,CAACkB,WAAD,CAAZ;MACAF,OAAO,CAACC,GAAR,CAAYC,WAAZ;MACA,OAAO,IAAIH,KAAJ,CAAU5B,KAAK,CAAC+B,WAAD,CAAL,CAAmB1B,IAA7B,CAAP;IACD,CAND,MAMO;MACL,OAAO,IAAIuB,KAAJ,CAAU5B,KAAK,CAACY,SAAD,CAAL,CAAiBP,IAA3B,CAAP;IACD;EACF,CAdD,CAbwB,CA6BxB;EACA;EACA;EACA;EACA;EACA;EACA;;;EAEA,MAAM2B,WAAW,GAAGrC,MAAM,EAA1B;EACA,MAAMsC,QAAQ,GAAGtC,MAAM,CAAC+B,QAAQ,EAAT,CAAvB;EACA,MAAMQ,WAAW,GAAGvC,MAAM,EAA1B;;EAEA,MAAMwC,QAAQ,GAAIC,IAAD,IAAU;IACzB3B,YAAY,CAACT,KAAK,CAACY,SAAD,CAAL,CAAiBV,WAAlB,CAAZ;IACAS,aAAa,CAACX,KAAK,CAACY,SAAD,CAAL,CAAiBT,MAAlB,CAAb;IACAc,WAAW,CAACjB,KAAK,CAACY,SAAD,CAAL,CAAiBR,IAAlB,CAAX;IACAW,UAAU,CAACf,KAAK,CAACY,SAAD,CAAL,CAAiBN,QAAlB,CAAV,CAJyB,CAKzB;EACD,CAND;;EAQA,MAAM+B,UAAU,GAAG,MAAM;IACvB;IACAC,aAAa,CAACJ,WAAW,CAACK,OAAb,CAAb;IACAL,WAAW,CAACK,OAAZ,GAAsBC,WAAW,CAAC,MAAM;MACtC,IAAIlB,SAAJ,EAAe;QACb,MAAMmB,WAAW,GAAGR,QAAQ,CAACM,OAAT,CAAiBE,WAArC;QACA,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAG,EAAzB,CAAvB;QACA,IAAII,cAAc,GAAGF,IAAI,CAACC,KAAL,CAAWH,WAAW,GAAG,EAAzB,CAArB;;QACA,IAAII,cAAc,GAAG,EAArB,EAAyB;UACvBA,cAAc,GAAI,IAAGA,cAAe,EAApC;QACD;;QACD1B,gBAAgB,CAAE,GAAEuB,cAAe,IAAGG,cAAe,EAArC,CAAhB;MACD;IACF,CAVgC,EAU9B,CAAC,IAAD,CAV8B,CAAjC;EAWD,CAdD,CAjDwB,CAiExB;;;EACA,MAAMC,QAAQ,GAAG,MAAM;IACrBvB,YAAY,CAAC,IAAD,CAAZ;EACD,CAFD;;EAIA,MAAMwB,SAAS,GAAG,MAAM;IACtBxB,YAAY,CAAC,KAAD,CAAZ;EACD,CAFD;;EAIA3B,SAAS,CAAC,MAAM;IACd,IAAI0B,SAAJ,EAAe;MACbe,UAAU;MACVJ,QAAQ,CAACM,OAAT,CAAiBS,IAAjB;IACD,CAHD,MAGO,IAAIf,QAAQ,IAAI,IAAZ,IAAoB,CAACX,SAAzB,EAAoC;MACzCW,QAAQ,CAACM,OAAT,CAAiBU,KAAjB;IACD,CANa,CAOd;;;IACApB,OAAO,CAACC,GAAR,CAAYR,SAAZ;EACD,CATQ,EASN,CAACA,SAAD,CATM,CAAT,CA1EwB,CAqFxB;EACA;EACA;;EACA1B,SAAS,CAAC,MAAM;IACdiC,OAAO,CAACC,GAAR,CAAYlB,SAAZ;IAEAqB,QAAQ,CAACM,OAAT,CAAiBU,KAAjB;IACA1B,YAAY,CAAC,KAAD,CAAZ;;IAEA,IAAIX,SAAS,GAAGZ,KAAK,CAAC2B,MAAN,GAAe,CAA/B,EAAkC;MAChCuB,KAAK,CAAC,eAAD,CAAL;IACD;;IACD,IAAItC,SAAS,GAAG,CAAhB,EAAmB;MACjB;IACD;;IACDiB,OAAO,CAACC,GAAR,CAAYlB,SAAZ;IAEAuB,QAAQ,CAACnC,KAAK,CAACY,SAAD,CAAN,CAAR;IACAqB,QAAQ,CAACM,OAAT,GAAmB,IAAIX,KAAJ,CAAU5B,KAAK,CAACY,SAAD,CAAL,CAAiBP,IAA3B,CAAnB;EACD,CAhBQ,EAgBN,CAACO,SAAD,CAhBM,CAAT,CAxFwB,CA0GxB;;EACAhB,SAAS,CAAC,MAAM;IACd,IAAIqC,QAAQ,CAACM,OAAb,EAAsB;MACpBN,QAAQ,CAACM,OAAT,CAAiBY,gBAAjB,CAAkC,gBAAlC,EAAqDC,CAAD,IAAO;QACzD,IAAInB,QAAQ,CAACM,OAAT,CAAiBf,QAAjB,IAA6B6B,GAAjC,EAAsC;UACpCxB,OAAO,CAACC,GAAR,CAAYG,QAAZ;UAEA,MAAMqB,GAAG,GAAGX,IAAI,CAACC,KAAL,CAAWX,QAAQ,CAACM,OAAT,CAAiBf,QAA5B,CAAZ;UACA,MAAM+B,OAAO,GAAGZ,IAAI,CAACC,KAAL,CAAWU,GAAG,GAAG,EAAjB,CAAhB;UACA,MAAME,OAAO,GAAGF,GAAG,GAAGC,OAAO,GAAG,EAAhC;UACA9B,WAAW,CAAE,GAAE8B,OAAQ,IAAGC,OAAQ,EAAvB,CAAX;UACAnC,kBAAkB,CAAEY,QAAQ,CAACM,OAAT,CAAiBE,WAAjB,GAA+Ba,GAAhC,GAAuC,GAAxC,CAAlB;QACD;MACF,CAVD;IAWD;EACF,CAdQ,EAcN,CAACrB,QAAD,EAAWrB,SAAX,CAdM,CAAT;;EAgBA,MAAM6C,cAAc,GAAIL,CAAD,IAAO;IAC1BvB,OAAO,CAACC,GAAR,CAAY,MAAZ;IACA,MAAM4B,KAAK,GAAGN,CAAC,CAACO,OAAhB;IACA,MAAMC,MAAM,GAAGR,CAAC,CAACS,WAAF,CAAcC,OAA7B;IACAjC,OAAO,CAACC,GAAR,CAAY4B,KAAZ,EAAmBE,MAAnB,EAJ0B,CAM9B;IACA;IACA;IAEI;EAEH,CAZD;;EAaA,oBACE;IAAA,uBACE;MAAK,SAAS,EAAC,kBAAf;MAAA,wBACE;QAAK,SAAS,EAAC,eAAf;QAAA,wBACE;UAAK,GAAG,EAAE9C,OAAV;UAAmB,GAAG,EAAC,WAAvB;UAAmC,EAAE,EAAC;QAAtC;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAO,EAAE,EAAC,OAAV;UAAA,uBACE;YAAQ,GAAG,EAAEmB,QAAb;YAAuB,IAAI,EAAC;UAA5B;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAOE;QAAI,EAAE,EAAC,OAAP;QAAA,UAAgBzB;MAAhB;QAAA;QAAA;QAAA;MAAA,QAPF,eAQE;QAAI,EAAE,EAAC,QAAP;QAAA,WACGE,UADH,SACkBM,QADlB;MAAA;QAAA;QAAA;QAAA;MAAA,QARF,eAWE;QAAK,SAAS,EAAC,oBAAf;QAAoC,EAAE,EAAC,oBAAvC;QAAA,wBACE;UACE,SAAS,EAAC,UADZ;UAEE,EAAE,EAAC,UAFL;UAGE,KAAK,EAAE;YAAE0C,KAAK,EAAG,GAAEtC,eAAgB;UAA5B,CAHT;UAIE,GAAG,EAAEY,WAJP;UAKE,OAAO,EAAE,MAAMyB;QALjB;UAAA;UAAA;UAAA;QAAA,QADF,eAQE;UAAK,SAAS,EAAC,kBAAf;UAAA,wBACE;YAAM,SAAS,EAAC,cAAhB;YAAA,UAAgCvC;UAAhC;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YAAM,SAAS,EAAC,UAAhB;YAAA,UAA4BM;UAA5B;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA,QARF,eAYE;UAAK,SAAS,EAAC,iBAAf;UAAA,wBACE;YACE,OAAO,EAAE,MAAMX,YAAY,CAACD,SAAS,GAAG,CAAb,CAD7B;YAEE,SAAS,EAAC,iBAFZ;YAGE,EAAE,EAAC,MAHL;YAIE,KAAK,EAAC;UAJR;YAAA;YAAA;YAAA;UAAA,QADF,eAOE;YACE,OAAO,EAAEkC,QADX;YAEE,SAAS,EAAE,CAACxB,SAAD,IAAc,yBAF3B;YAGE,EAAE,EAAC,MAHL;YAIE,KAAK,EAAC;UAJR;YAAA;YAAA;YAAA;UAAA,QAPF,eAaE;YACE,OAAO,EAAEyB,SADX;YAEE,SAAS,EAAEzB,SAAS,IAAI,0BAF1B;YAGE,EAAE,EAAC,OAHL;YAIE,KAAK,EAAC;UAJR;YAAA;YAAA;YAAA;UAAA,QAbF,eAmBE;YACE,OAAO,EAAE,MAAMT,YAAY,CAACD,SAAS,GAAG,CAAb,CAD7B;YAEE,SAAS,EAAC,gBAFZ;YAGE,EAAE,EAAC,MAHL;YAIE,KAAK,EAAC;UAJR;YAAA;YAAA;YAAA;UAAA,QAnBF;QAAA;UAAA;UAAA;UAAA;QAAA,QAZF;MAAA;QAAA;QAAA;QAAA;MAAA,QAXF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF,iBADF;AAuDD,CA/LD;;GAAML,W;;KAAAA,W;AAiMN,eAAeA,WAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA"},"metadata":{},"sourceType":"module"}