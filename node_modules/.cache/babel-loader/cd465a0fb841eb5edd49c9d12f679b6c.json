{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport blogs from \"../blogposts/blogposts.json\";\nexport const DOTS = \"...\";\n\nfunction usePagination(_ref) {\n  _s();\n\n  let {\n    pageNumber\n  } = _ref;\n  const totalCount = blogs.posts.length;\n  const defaultPaginationData = blogs.posts.slice(0, 15);\n  const defaultPageSize = 15;\n  const defaultLastPage = Math.ceil(totalCount / defaultPageSize);\n  const [isSettingPage, setIsSettingPage] = useState(false);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n  const [lastPage, setLastPage] = useState(defaultLastPage);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageNumbers, setPageNumbers] = useState([1, 2, 3, DOTS, lastPage]);\n  const [currentPaginationData, setCurrentPaginationData] = useState(defaultPaginationData); // call this function to conditionally change the displayed pageNumbers used in Pagination based on the currentPage currently being viewed.\n\n  const changePageNumbers = () => {\n    let prevSib = currentPage - 1;\n    let nextSib = currentPage + 1;\n    let updatedPageNumbers; // if only one page\n\n    console.log(pageSize);\n\n    if (totalCount <= 15 || pageSize === 15) {\n      updatedPageNumbers = [1];\n    }\n\n    if (totalCount > 15 || totalCount < 30) {\n      updatedPageNumbers = [1, 2];\n    } // if on last page\n    else if (currentPage === lastPage) {\n      updatedPageNumbers = [1, DOTS, lastPage - 2, lastPage - 1, lastPage];\n      setLastPage(currentPage);\n    } // if on 2nd last page\n    else if (currentPage === lastPage - 1) {\n      updatedPageNumbers = [1, DOTS, lastPage - 2, lastPage - 1, lastPage];\n    } // if navigate back to 1st page\n    else if (currentPage === 1) {\n      updatedPageNumbers = [1, 2, 3, DOTS, lastPage];\n    } // if on 2nd page\n    else if (currentPage === 2) {\n      updatedPageNumbers = [1, DOTS, currentPage, nextSib, nextSib + 1, DOTS, lastPage];\n    } // in any other case\n    else {\n      updatedPageNumbers = [1, DOTS, prevSib, currentPage, nextSib, DOTS, lastPage];\n    }\n\n    setPageNumbers(updatedPageNumbers);\n  }; //  when either currentPage or pageSize are changed, call changePageNumbers to update them to reflect the current position in navigation / the current pageSize.\n\n\n  useEffect(() => {\n    changePageNumbers();\n  }, [currentPage, pageSize]); // onClick 'next' button in Pagination component, currentPage state + 1\n\n  const onNext = () => {\n    setCurrentPage(currentPage + 1);\n  }; // onClick 'previous' button in Pagination component, currentPage state - 1\n\n\n  const onPrev = () => {\n    setCurrentPage(currentPage - 1);\n  }; // when currentPage state changes, set currentPaginationData to the following data sliced from blog.posts array\n\n\n  useEffect(() => {\n    let indexStart = (currentPage - 1) * pageSize;\n    const updatedPaginationData = blogs.posts.slice(indexStart, indexStart + pageSize);\n    setCurrentPaginationData(updatedPaginationData);\n  }, [currentPage]); // onClick of page number in Paginaton, set currentPage state to the number clicked on. Set isSettingPage boolean to 'true'.\n\n  const onPageChange = pageNumber => {\n    setCurrentPage(pageNumber);\n    setIsSettingPage(true);\n  }; // when isSettingPage set to true by onPageChange function, set currentPaginationData to the following data sliced from blog.posts array. Then, re-set the same boolean to false.\n\n\n  useEffect(() => {\n    if (isSettingPage) {\n      let indexStart = (currentPage - 1) * pageSize;\n      const updatedPaginationData = blogs.posts.slice(indexStart, indexStart + pageSize);\n      setCurrentPaginationData(updatedPaginationData);\n      setIsSettingPage(false);\n    }\n  }, [isSettingPage]); // onPageSizeOptionChange in Pagination component. When option changed, call this function with the current size as an argument.\n  // Set page size to this size, then call changePageNumbers() to trigger a change in the number of pages that contain data.\n\n  const updateRowsPerPage = size => {\n    setPageSize(size);\n    changePageNumbers();\n  }; //  when pageSize state changes, set 'indexStart' variable to get correct starting index to slice array based on pageSize.\n  // slice currentPaginationData to reflect changed pageSize.\n\n\n  useEffect(() => {\n    let indexStart = (currentPage - 1) * pageSize;\n    const updatedPaginationData = blogs.posts.slice(indexStart, indexStart + pageSize);\n    setCurrentPaginationData(updatedPaginationData); // set currentPage state to 1 to display 1st page; set lastPage state to change lastPage icon.\n\n    setCurrentPage(1);\n    setLastPage(Math.ceil(totalCount / pageSize));\n  }, [pageSize]); // when lastPage set in the above useEffect, call changePageNumbers to refresh the pageNumbers state and immediately change the rendered pageSize.\n\n  useEffect(() => {\n    changePageNumbers();\n  }, [lastPage]);\n  return {\n    pageNumbers,\n    lastPage,\n    pageSize,\n    updateRowsPerPage,\n    currentPage,\n    currentPaginationData,\n    onPageChange,\n    onNext,\n    onPrev\n  };\n}\n\n_s(usePagination, \"iSKBn57Put7RBZoBIPPtxwOFiNk=\");\n\nexport default usePagination;","map":{"version":3,"names":["React","useState","useEffect","blogs","DOTS","usePagination","pageNumber","totalCount","posts","length","defaultPaginationData","slice","defaultPageSize","defaultLastPage","Math","ceil","isSettingPage","setIsSettingPage","pageSize","setPageSize","lastPage","setLastPage","currentPage","setCurrentPage","pageNumbers","setPageNumbers","currentPaginationData","setCurrentPaginationData","changePageNumbers","prevSib","nextSib","updatedPageNumbers","console","log","onNext","onPrev","indexStart","updatedPaginationData","onPageChange","updateRowsPerPage","size"],"sources":["/home/matt/Documents/new-personal-projects/blog/src/hooks/usePagination.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport blogs from \"../blogposts/blogposts.json\";\n\nexport const DOTS = \"...\";\n\n\nfunction usePagination({pageNumber}) {\n  const totalCount = blogs.posts.length;\n  const defaultPaginationData = blogs.posts.slice(0, 15)\n  const defaultPageSize = 15;\n  const defaultLastPage = Math.ceil(totalCount / defaultPageSize)\n\n  const [isSettingPage, setIsSettingPage] = useState(false);\n  const [pageSize, setPageSize] = useState(defaultPageSize);\n  const [lastPage, setLastPage] = useState(defaultLastPage);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageNumbers, setPageNumbers] = useState([1, 2, 3, DOTS, lastPage]);\n  const [currentPaginationData, setCurrentPaginationData] = useState(defaultPaginationData);\n\n  // call this function to conditionally change the displayed pageNumbers used in Pagination based on the currentPage currently being viewed.\n  const changePageNumbers = () => {\n    let prevSib = currentPage - 1;\n    let nextSib = currentPage + 1;\n    let updatedPageNumbers;\n    // if only one page\n    console.log(pageSize)\n    if (totalCount <= 15 || pageSize === 15) {\n      updatedPageNumbers = [1];\n    }\n    if (totalCount > 15  || totalCount < 30) {\n      updatedPageNumbers = [1, 2];\n    }\n    // if on last page\n    else if (currentPage === lastPage) {\n      updatedPageNumbers = [1, DOTS, lastPage - 2, lastPage - 1, lastPage];\n      setLastPage(currentPage);\n    }\n    // if on 2nd last page\n    else if (currentPage === lastPage - 1) {\n      updatedPageNumbers = [1, DOTS, lastPage - 2, lastPage - 1, lastPage];\n    }\n    // if navigate back to 1st page\n    else if (currentPage === 1) {\n      updatedPageNumbers = [1, 2, 3, DOTS, lastPage];\n    }\n    // if on 2nd page\n    else if (currentPage === 2) {\n      updatedPageNumbers = [1, DOTS, currentPage, nextSib, nextSib + 1, DOTS, lastPage];\n    }\n    // in any other case\n    else {\n      updatedPageNumbers = [1, DOTS, prevSib, currentPage, nextSib, DOTS, lastPage];\n    }\n    setPageNumbers(updatedPageNumbers)\n  };\n\n  //  when either currentPage or pageSize are changed, call changePageNumbers to update them to reflect the current position in navigation / the current pageSize.\n  useEffect(() => {\n    changePageNumbers();\n  }, [currentPage, pageSize]);\n\n  // onClick 'next' button in Pagination component, currentPage state + 1\n  const onNext = () => {\n    setCurrentPage(currentPage + 1);\n  };\n\n  // onClick 'previous' button in Pagination component, currentPage state - 1\n  const onPrev = () => {\n    setCurrentPage(currentPage - 1);\n  };\n\n  // when currentPage state changes, set currentPaginationData to the following data sliced from blog.posts array\n  useEffect(() => {\n    let indexStart = (currentPage - 1) * pageSize;\n    const updatedPaginationData = blogs.posts.slice((indexStart), (indexStart) + (pageSize))\n    setCurrentPaginationData(updatedPaginationData);\n  }, [currentPage]);\n\n  // onClick of page number in Paginaton, set currentPage state to the number clicked on. Set isSettingPage boolean to 'true'.\n  const onPageChange = (pageNumber) => {\n    setCurrentPage(pageNumber);\n    setIsSettingPage(true);\n  };\n\n  // when isSettingPage set to true by onPageChange function, set currentPaginationData to the following data sliced from blog.posts array. Then, re-set the same boolean to false.\n  useEffect(() => {\n    if (isSettingPage) {\n      let indexStart = (currentPage - 1) * pageSize;\n      const updatedPaginationData = blogs.posts.slice((indexStart), (indexStart) + (pageSize))\n      setCurrentPaginationData(updatedPaginationData);\n      setIsSettingPage(false);\n    }\n  }, [isSettingPage]);\n\n  // onPageSizeOptionChange in Pagination component. When option changed, call this function with the current size as an argument.\n  // Set page size to this size, then call changePageNumbers() to trigger a change in the number of pages that contain data.\n  const updateRowsPerPage = (size) => {\n    setPageSize(size);\n    changePageNumbers();\n  };\n\n  //  when pageSize state changes, set 'indexStart' variable to get correct starting index to slice array based on pageSize.\n  // slice currentPaginationData to reflect changed pageSize.\n  useEffect(() => {\n    let indexStart = (currentPage - 1) * pageSize;\n    const updatedPaginationData = blogs.posts.slice((indexStart), (indexStart) + (pageSize))\n    setCurrentPaginationData(updatedPaginationData);\n    // set currentPage state to 1 to display 1st page; set lastPage state to change lastPage icon.\n    setCurrentPage(1);\n    setLastPage(Math.ceil(totalCount / pageSize));\n  }, [pageSize]);\n\n  // when lastPage set in the above useEffect, call changePageNumbers to refresh the pageNumbers state and immediately change the rendered pageSize.\n  useEffect(() => {\n    changePageNumbers();\n  }, [lastPage]);\n\n  return {\n    pageNumbers,\n    lastPage,\n    pageSize,\n    updateRowsPerPage,\n    currentPage,\n    currentPaginationData,\n    onPageChange,\n    onNext,\n    onPrev,\n  };\n}\n\nexport default usePagination;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}